import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"KeyboardButtonPayload","description":"","frontmatter":{"outline":[1,4],"next":false,"prev":false},"headers":[],"relativePath":"documentation/interfaces/KeyboardButtonPayload.md","filePath":"documentation/interfaces/KeyboardButtonPayload.md"}');
const _sfc_main = { name: "documentation/interfaces/KeyboardButtonPayload.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><p>export Interface</p><h1 id="keyboardbuttonpayload" tabindex="-1">KeyboardButtonPayload <a class="header-anchor" href="#keyboardbuttonpayload" aria-label="Permalink to &quot;KeyboardButtonPayload&quot;">​</a></h1><p>This object represents one button of an inline keyboard. Exactly one of the optional fields must be used to specify type of the button.</p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h4 id="callback-data-string" tabindex="-1">callback_data? : <code>string</code> <a class="header-anchor" href="#callback-data-string" aria-label="Permalink to &quot;callback_data? : \`string\`&quot;">​</a></h4><h4 id="callback-game-string" tabindex="-1">callback_game? : <code>string</code> <a class="header-anchor" href="#callback-game-string" aria-label="Permalink to &quot;callback_game? : \`string\`&quot;">​</a></h4><h4 id="login-url-loginurl" tabindex="-1">login_url? : <a href="./LoginUrl.html"><code>LoginUrl</code></a> <a class="header-anchor" href="#login-url-loginurl" aria-label="Permalink to &quot;login_url? : [\`LoginUrl\`](./LoginUrl.md)&quot;">​</a></h4><h4 id="pay-boolean" tabindex="-1">pay? : <code>boolean</code> <a class="header-anchor" href="#pay-boolean" aria-label="Permalink to &quot;pay? : \`boolean\`&quot;">​</a></h4><h4 id="switch-inline-query-string" tabindex="-1">switch_inline_query? : <code>string</code> <a class="header-anchor" href="#switch-inline-query-string" aria-label="Permalink to &quot;switch_inline_query? : \`string\`&quot;">​</a></h4><h4 id="switch-inline-query-chosen-chat-switchinlinequerychosenchat" tabindex="-1">switch_inline_query_chosen_chat? : <a href="./SwitchInlineQueryChosenChat.html"><code>SwitchInlineQueryChosenChat</code></a> <a class="header-anchor" href="#switch-inline-query-chosen-chat-switchinlinequerychosenchat" aria-label="Permalink to &quot;switch_inline_query_chosen_chat? : [\`SwitchInlineQueryChosenChat\`](./SwitchInlineQueryChosenChat.md)&quot;">​</a></h4><h4 id="switch-inline-query-current-chat-string" tabindex="-1">switch_inline_query_current_chat? : <code>string</code> <a class="header-anchor" href="#switch-inline-query-current-chat-string" aria-label="Permalink to &quot;switch_inline_query_current_chat? : \`string\`&quot;">​</a></h4><h4 id="text-string" tabindex="-1">text : <code>string</code> <a class="header-anchor" href="#text-string" aria-label="Permalink to &quot;text : \`string\`&quot;">​</a></h4><h4 id="url-string" tabindex="-1">url? : <code>string</code> <a class="header-anchor" href="#url-string" aria-label="Permalink to &quot;url? : \`string\`&quot;">​</a></h4><h4 id="web-app-webappinfo" tabindex="-1">web_app? : <a href="./WebAppInfo.html"><code>WebAppInfo</code></a> <a class="header-anchor" href="#web-app-webappinfo" aria-label="Permalink to &quot;web_app? : [\`WebAppInfo\`](./WebAppInfo.md)&quot;">​</a></h4></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("documentation/interfaces/KeyboardButtonPayload.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const KeyboardButtonPayload = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  KeyboardButtonPayload as default
};
