import { resolveComponent, useSSRContext } from "vue";
import { ssrRenderAttrs, ssrRenderStyle, ssrRenderComponent } from "vue/server-renderer";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"Event","description":"","frontmatter":{"outline":[1,4],"next":false,"prev":false},"headers":[],"relativePath":"documentation/classes/Event.md","filePath":"documentation/classes/Event.md"}');
const _sfc_main = { name: "documentation/classes/Event.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  const _component_Badge = resolveComponent("Badge");
  _push(`<div${ssrRenderAttrs(_attrs)}><p>export abstract Class</p><h1 id="event" tabindex="-1">Event <a class="header-anchor" href="#event" aria-label="Permalink to &quot;Event&quot;">​</a></h1><h4 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h4><p><code>Piece</code>&lt;<a href="./../interfaces/EventMeta.html"><code>EventMeta</code></a>&gt;</p><p>An event piece.</p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">new</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}"> Event</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">( context_piece, context_metadata )</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Parameter</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Type</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Description</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>context_piece</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>PieceContext</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}"></td></tr><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>context_metadata</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><a href="./../interfaces/EventMeta.html"><code>EventMeta</code></a></td><td style="${ssrRenderStyle({ "text-align": "left" })}"></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h4 id="readonly-client-client" tabindex="-1">`);
  _push(ssrRenderComponent(_component_Badge, {
    type: "danger",
    text: "readonly"
  }, null, _parent));
  _push(` client : <a href="./Client.html"><code>Client</code></a> <a class="header-anchor" href="#readonly-client-client" aria-label="Permalink to &quot;$readonly client : [\`Client\`](./Client.md)&quot;">​</a></h4><h4 id="emitter-any" tabindex="-1">emitter : <code>any</code> <a class="header-anchor" href="#emitter-any" aria-label="Permalink to &quot;emitter : \`any\`&quot;">​</a></h4><h4 id="enabled-boolean" tabindex="-1">enabled : <code>boolean</code> <a class="header-anchor" href="#enabled-boolean" aria-label="Permalink to &quot;enabled : \`boolean\`&quot;">​</a></h4><h4 id="event-string" tabindex="-1">event : <code>string</code> <a class="header-anchor" href="#event-string" aria-label="Permalink to &quot;event : \`string\`&quot;">​</a></h4><h4 id="name-clientevent" tabindex="-1">name : <a href="./../enumerations/ClientEvent.html"><code>ClientEvent</code></a> <a class="header-anchor" href="#name-clientevent" aria-label="Permalink to &quot;name : [\`ClientEvent\`](../enumerations/ClientEvent.md)&quot;">​</a></h4><h4 id="once-boolean" tabindex="-1">once : <code>boolean</code> <a class="header-anchor" href="#once-boolean" aria-label="Permalink to &quot;once : \`boolean\`&quot;">​</a></h4><h4 id="registry-eventsregistry" tabindex="-1">registry : <code>EventsRegistry</code> <a class="header-anchor" href="#registry-eventsregistry" aria-label="Permalink to &quot;registry : \`EventsRegistry\`&quot;">​</a></h4><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h4 id="listen" tabindex="-1">listen( ) <a class="header-anchor" href="#listen" aria-label="Permalink to &quot;listen( )&quot;">​</a></h4><p>Activates or resumes the listener, this is activated on load.</p><p>Returns: <code>void</code></p><h4 id="run-args" tabindex="-1">run( ...args ) <a class="header-anchor" href="#run-args" aria-label="Permalink to &quot;run( ...args )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="${ssrRenderStyle({ "text-align": "left" })}">Parameter</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Type</th><th style="${ssrRenderStyle({ "text-align": "left" })}">Description</th></tr></thead><tbody><tr><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>...args</code></td><td style="${ssrRenderStyle({ "text-align": "left" })}"><code>unknown</code>[]</td><td style="${ssrRenderStyle({ "text-align": "left" })}"></td></tr></tbody></table><p>Returns: <code>unknown</code></p><h4 id="stop" tabindex="-1">stop( ) <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;stop( )&quot;">​</a></h4><p>Stops the listener.</p><p>Returns: <code>void</code></p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("documentation/classes/Event.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const Event = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  Event as default
};
