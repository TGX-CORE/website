import{_ as a,c as t,a2 as o,o as i}from"./chunks/framework.DPuwY6B9.js";const m=JSON.parse('{"title":"ClientOptions","description":"","frontmatter":{"outline":[1,4],"next":false,"prev":false},"headers":[],"relativePath":"documentation/interfaces/ClientOptions.md","filePath":"documentation/interfaces/ClientOptions.md"}'),n={name:"documentation/interfaces/ClientOptions.md"};function r(l,e,s,p,c,d){return i(),t("div",null,e[0]||(e[0]=[o('<p>export Interface</p><h1 id="clientoptions" tabindex="-1">ClientOptions <a class="header-anchor" href="#clientoptions" aria-label="Permalink to &quot;ClientOptions&quot;">​</a></h1><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h4 id="actions-clientaction-all-clientaction" tabindex="-1">actions? : <a href="./../enumerations/ClientAction.html#all"><code>ClientAction.All</code></a> | <a href="./../enumerations/ClientAction.html"><code>ClientAction[]</code></a> <a class="header-anchor" href="#actions-clientaction-all-clientaction" aria-label="Permalink to &quot;actions? : [`ClientAction.All`](../enumerations/ClientAction.md#all) \\| [`ClientAction[]`](../enumerations/ClientAction.md)&quot;">​</a></h4><h4 id="api-apimanageroptions" tabindex="-1">api? : <a href="./APIManagerOptions.html"><code>APIManagerOptions</code></a> <a class="header-anchor" href="#api-apimanageroptions" aria-label="Permalink to &quot;api? : [`APIManagerOptions`](./APIManagerOptions.md)&quot;">​</a></h4><h4 id="endpoint-endpoint" tabindex="-1">endpoint? : <a href="./../enumerations/Endpoint.html"><code>Endpoint</code></a> <a class="header-anchor" href="#endpoint-endpoint" aria-label="Permalink to &quot;endpoint? : [`Endpoint`](../enumerations/Endpoint.md)&quot;">​</a></h4><blockquote><p>The method for receiving updates from Telegram. default: <code>Endpoint.Poll</code></p></blockquote><h4 id="logger-loggeroptions" tabindex="-1">logger? : <a href="./LoggerOptions.html"><code>LoggerOptions</code></a> <a class="header-anchor" href="#logger-loggeroptions" aria-label="Permalink to &quot;logger? : [`LoggerOptions`](./LoggerOptions.md)&quot;">​</a></h4><h4 id="parseables-parseables" tabindex="-1">parseables? : <a href="./../enumerations/Parseables.html"><code>Parseables[]</code></a> <a class="header-anchor" href="#parseables-parseables" aria-label="Permalink to &quot;parseables? : [`Parseables[]`](../enumerations/Parseables.md)&quot;">​</a></h4><h4 id="partials-partialtypes" tabindex="-1">partials? : <a href="./../enumerations/PartialTypes.html"><code>PartialTypes[]</code></a> <a class="header-anchor" href="#partials-partialtypes" aria-label="Permalink to &quot;partials? : [`PartialTypes[]`](../enumerations/PartialTypes.md)&quot;">​</a></h4><h4 id="poll-pollmanageroptions" tabindex="-1">poll? : <a href="./PollManagerOptions.html"><code>PollManagerOptions</code></a> <a class="header-anchor" href="#poll-pollmanageroptions" aria-label="Permalink to &quot;poll? : [`PollManagerOptions`](./PollManagerOptions.md)&quot;">​</a></h4><h4 id="registries-registries-all-registries" tabindex="-1">registries? : <a href="./../enumerations/Registries.html#all"><code>Registries.All</code></a> | <a href="./../enumerations/Registries.html"><code>Registries[]</code></a> <a class="header-anchor" href="#registries-registries-all-registries" aria-label="Permalink to &quot;registries? : [`Registries.All`](../enumerations/Registries.md#all) \\| [`Registries[]`](../enumerations/Registries.md)&quot;">​</a></h4><blockquote><p>Set to <code>Registries.All</code> to load all registries or an array of specific registries.</p></blockquote><h4 id="sweep-string-boolean" tabindex="-1">sweep? : <code>string</code> | <code>boolean</code> <a class="header-anchor" href="#sweep-string-boolean" aria-label="Permalink to &quot;sweep? : `string` \\| `boolean`&quot;">​</a></h4><blockquote><p>Set to <em>true</em> to sweep main directory or set to an absolute path to sweep a specific path.</p></blockquote>',15)]))}const g=a(n,[["render",r]]);export{m as __pageData,g as default};
