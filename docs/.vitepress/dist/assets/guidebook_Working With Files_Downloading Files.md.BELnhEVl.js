import{_ as e,c as a,a2 as s,o as n}from"./chunks/framework.DPuwY6B9.js";const k=JSON.parse('{"title":"Downloading Files","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guidebook/Working With Files/Downloading Files.md","filePath":"guidebook/Working With Files/Downloading Files.md"}'),l={name:"guidebook/Working With Files/Downloading Files.md"};function t(o,i,d,h,r,p){return n(),a("div",null,i[0]||(i[0]=[s(`<h1 id="downloading-files" tabindex="-1">Downloading Files <a class="header-anchor" href="#downloading-files" aria-label="Permalink to &quot;Downloading Files&quot;">​</a></h1><p><code>tgx-core</code> exports a <a href="./../../documentation/classes/File.html"><code>File</code></a> class that you can use to download files.</p><p>Before you can download a file, you need to fetch it first according to the Telegram API.</p><blockquote><p>When fetching a file, it generates a <code>file_path</code>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling.</p></blockquote><h3 id="downloading" tabindex="-1">Downloading <a class="header-anchor" href="#downloading" aria-label="Permalink to &quot;Downloading&quot;">​</a></h3><p>Calling the <code>download()</code> method will also call <code>fetch()</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message.photo[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">download</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:/../../../media/photo.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="downloading-by-file-id" tabindex="-1">Downloading by file_id <a class="header-anchor" href="#downloading-by-file-id" aria-label="Permalink to &quot;Downloading by file_id&quot;">​</a></h3><p>Since <code>File</code> is an independent class, you&#39;ll need to attach your client to the class. Ensure the id is correct otherwise it will return <code>false</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;file_id&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(client)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">download</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C:/../../../media/photo.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><p>The information was provided by Telegram&#39;s bot API documentation, <a href="https://core.telegram.org/bots/api#file" target="_blank" rel="noreferrer"><code>TelegramAPI#file</code></a>.</p>`,12)]))}const g=e(l,[["render",t]]);export{k as __pageData,g as default};
