import{_ as d,c as s,a2 as o,j as e,G as r,a,B as n,o as i}from"./chunks/framework.DPuwY6B9.js";const x=JSON.parse('{"title":"Logger","description":"","frontmatter":{"outline":[1,4],"next":false,"prev":false},"headers":[],"relativePath":"documentation/classes/Logger.md","filePath":"documentation/classes/Logger.md"}'),h={name:"documentation/classes/Logger.md"},g={id:"static-readonly-levels-map-loglevel-logmethods",tabindex:"-1"};function c(u,t,b,m,p,y){const l=n("Badge");return i(),s("div",null,[t[8]||(t[8]=o('<p>export Class</p><h1 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h1><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( level )</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>level</code> = <code>LogLevel.Debug</code></td><td style="text-align:left;"><code>undefined</code> | <a href="./../enumerations/LogLevel.html"><code>LogLevel</code></a></td><td style="text-align:left;"></td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><h4 id="level-loglevel" tabindex="-1">level : <a href="./../enumerations/LogLevel.html"><code>LogLevel</code></a> <a class="header-anchor" href="#level-loglevel" aria-label="Permalink to &quot;level : [`LogLevel`](../enumerations/LogLevel.md)&quot;">​</a></h4>',7)),e("h4",g,[r(l,{type:"danger",text:"static"}),r(l,{type:"danger",text:"readonly"}),t[0]||(t[0]=a(" levels : ")),t[1]||(t[1]=e("code",null,"Map",-1)),t[2]||(t[2]=a("<")),t[3]||(t[3]=e("a",{href:"./../enumerations/LogLevel.html"},[e("code",null,"LogLevel")],-1)),t[4]||(t[4]=a(", ")),t[5]||(t[5]=e("a",{href:"./../type-aliases/LogMethods.html"},[e("code",null,"LogMethods")],-1)),t[6]||(t[6]=a("> ")),t[7]||(t[7]=e("a",{class:"header-anchor",href:"#static-readonly-levels-map-loglevel-logmethods","aria-label":'Permalink to "$static$readonly levels : `Map`<[`LogLevel`](../enumerations/LogLevel.md), [`LogMethods`](../type-aliases/LogMethods.md)>"'},"​",-1))]),t[9]||(t[9]=o('<blockquote><p>default: ...</p></blockquote><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h4 id="debug-argumants" tabindex="-1">debug( ...argumants ) <a class="header-anchor" href="#debug-argumants" aria-label="Permalink to &quot;debug( ...argumants )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...argumants</code></td><td style="text-align:left;"><code>any[]</code></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>Returns: <code>void</code></p></blockquote><h4 id="error-argumants" tabindex="-1">error( ...argumants ) <a class="header-anchor" href="#error-argumants" aria-label="Permalink to &quot;error( ...argumants )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...argumants</code></td><td style="text-align:left;"><code>any[]</code></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>Returns: <code>void</code></p></blockquote><h4 id="has-level" tabindex="-1">has( level ) <a class="header-anchor" href="#has-level" aria-label="Permalink to &quot;has( level )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>level</code></td><td style="text-align:left;"><a href="./../enumerations/LogLevel.html"><code>LogLevel</code></a></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>Returns: <code>boolean</code></p></blockquote><h4 id="info-argumants" tabindex="-1">info( ...argumants ) <a class="header-anchor" href="#info-argumants" aria-label="Permalink to &quot;info( ...argumants )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...argumants</code></td><td style="text-align:left;"><code>any[]</code></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>Returns: <code>void</code></p></blockquote><h4 id="warn-argumants" tabindex="-1">warn( ...argumants ) <a class="header-anchor" href="#warn-argumants" aria-label="Permalink to &quot;warn( ...argumants )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...argumants</code></td><td style="text-align:left;"><code>any[]</code></td><td style="text-align:left;"></td></tr></tbody></table><blockquote><p>Returns: <code>void</code></p></blockquote>',17))])}const v=d(h,[["render",c]]);export{x as __pageData,v as default};
