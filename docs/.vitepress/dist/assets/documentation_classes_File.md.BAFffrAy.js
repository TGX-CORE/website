import{_ as l,D as o,c as n,j as e,I as i,a as t,a4 as s,o as r}from"./chunks/framework.CRCV4hx_.js";const I=JSON.parse('{"title":"File","description":"","frontmatter":{"outline":[1,4],"next":false,"prev":false},"headers":[],"relativePath":"documentation/classes/File.md","filePath":"documentation/classes/File.md"}'),d={name:"documentation/classes/File.md"},h=s('<p>export Class</p><h1 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h1><h4 id="implements" tabindex="-1">implements <a class="header-anchor" href="#implements" aria-label="Permalink to &quot;implements&quot;">​</a></h4><p><a href="./../interfaces/FilePacket.html"><code>FilePacket</code></a></p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( packet )</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>packet?</code></td><td style="text-align:left;"><code>string</code> | <a href="./../interfaces/FilePacket.html"><code>FilePacket</code></a></td><td style="text-align:left;">The packet, the filel_id, or absolute path to the file to read.</td></tr></tbody></table><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2>',8),c={id:"get-form-string-readstream-string",tabindex:"-1"},_=e("code",null,"[string, ReadStream, string]",-1),p=e("a",{class:"header-anchor",href:"#get-form-string-readstream-string","aria-label":'Permalink to "$get form : `[string, ReadStream, string]`"'},"​",-1),f={id:"get-id-string",tabindex:"-1"},g=e("code",null,"string",-1),m=e("a",{class:"header-anchor",href:"#get-id-string","aria-label":'Permalink to "$get id : `string`"'},"​",-1),u={id:"readonly-client-client",tabindex:"-1"},b=e("a",{href:"./Client.html"},[e("code",null,"Client")],-1),y=e("a",{class:"header-anchor",href:"#readonly-client-client","aria-label":'Permalink to "$readonly client? : [`Client`](./Client.md)"'},"​",-1),x=s('<p>The client will only be availble if the class is passed by tgx-core itself.</p><h4 id="file-id-string" tabindex="-1">file_id? : <code>string</code> <a class="header-anchor" href="#file-id-string" aria-label="Permalink to &quot;file_id? : `string`&quot;">​</a></h4><h4 id="file-path-string" tabindex="-1">file_path? : <code>string</code> <a class="header-anchor" href="#file-path-string" aria-label="Permalink to &quot;file_path? : `string`&quot;">​</a></h4><h4 id="path-string" tabindex="-1">path? : <code>string</code> <a class="header-anchor" href="#path-string" aria-label="Permalink to &quot;path? : `string`&quot;">​</a></h4><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2>',5),k={id:"asyncdownload-path",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#asyncdownload-path","aria-label":'Permalink to "$asyncdownload( path )"'},"​",-1),T=s('<p>Downloads the file.</p><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>path</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Leave empty if you want a stream, or an absolute path to the file where you want to write the Stream.</td></tr></tbody></table><p>Returns: <code>Promise</code>&lt;<code>boolean</code> | <code>internal.Stream</code>&gt;</p>',3),F={id:"asyncfetch",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#asyncfetch","aria-label":'Permalink to "$asyncfetch( )"'},"​",-1),C=e("p",null,"Fetch the file from Telegram, this is required for downloading the file.",-1),S=e("p",null,[t("Returns: "),e("code",null,"Promise"),t("<"),e("code",null,"boolean"),t(" | "),e("a",{href:"./File.html"},[e("code",null,"File")]),t(">")],-1);function w(v,A,V,D,$,E){const a=o("Badge");return r(),n("div",null,[h,e("h4",c,[i(a,{type:"danger",text:"get"}),t(" form : "),_,t(),p]),e("h4",f,[i(a,{type:"danger",text:"get"}),t(" id : "),g,t(),m]),e("h4",u,[i(a,{type:"danger",text:"readonly"}),t(" client? : "),b,t(),y]),x,e("h4",k,[i(a,{type:"tip",text:"async"}),t("download( path ) "),P]),T,e("h4",F,[i(a,{type:"tip",text:"async"}),t("fetch( ) "),q]),C,S])}const R=l(d,[["render",w]]);export{I as __pageData,R as default};
