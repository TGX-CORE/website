import{_ as e,c as a,a2 as s,o}from"./chunks/framework.DPuwY6B9.js";const x=JSON.parse('{"title":"PollOptions","description":"","frontmatter":{"outline":[1,4],"next":false,"prev":false},"headers":[],"relativePath":"documentation/classes/PollOptions.md","filePath":"documentation/classes/PollOptions.md"}'),l={name:"documentation/classes/PollOptions.md"};function i(n,t,d,r,h,p){return o(),a("div",null,t[0]||(t[0]=[s('<p>export Class</p><h1 id="polloptions" tabindex="-1">PollOptions <a class="header-anchor" href="#polloptions" aria-label="Permalink to &quot;PollOptions&quot;">​</a></h1><h4 id="extends" tabindex="-1">extends <a class="header-anchor" href="#extends" aria-label="Permalink to &quot;extends&quot;">​</a></h4><p><code>Builder</code></p><h2 id="constructor" tabindex="-1">Constructor <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;Constructor&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PollOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">options )</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>...options</code></td><td style="text-align:left;"><a href="./../interfaces/PollOption.html"><code>PollOption[]</code></a></td><td style="text-align:left;">The options of a poll to be sent.</td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h4 id="add-text-text-parse-mode-text-entities" tabindex="-1">add( text, text_parse_mode, text_entities ) <a class="header-anchor" href="#add-text-text-parse-mode-text-entities" aria-label="Permalink to &quot;add( text, text_parse_mode, text_entities )&quot;">​</a></h4><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>text</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Option text, 1-100 characters</td></tr><tr><td style="text-align:left;"><code>text_parse_mode?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed.</td></tr><tr><td style="text-align:left;"><code>text_entities?</code></td><td style="text-align:left;"><a href="./MessageEntities.html"><code>MessageEntities</code></a> | <a href="./../interfaces/MessageEntityPayload.html"><code>MessageEntityPayload[]</code></a></td><td style="text-align:left;">List of special entities that appear in the poll option text. It can be specified instead of text_parse_mode.</td></tr></tbody></table><blockquote><p>Adds an option to the current builder.</p><p>Returns: <a href="./PollOptions.html"><code>PollOptions</code></a></p></blockquote>',11)]))}const f=e(l,[["render",i]]);export{x as __pageData,f as default};
